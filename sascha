#!/bin/bash

objecto=''
objectos=''
entidad=''
entidades=''
data=''
dataUpdate=''
declare -a ARRAY=('id_'$entidad)

function main(){
clear
	while true; do	
		echo -e "---------------------------------------- "$rescolor
		echo -e "|          GENERADOR DE RUTAS          |"$rescolor
		echo -e "|                                      |"$rescolor
		echo -e "----------------------------------------"$rescolor
		echo -e "      1) Asignar entidad "
		echo -e "      2) Asignar columna "
		echo -e "      3) Crear entidad   "
		echo -e "      4) Remover entidad "
		echo -e "      5) Cancelar  	  "
		echo
		echo -n "     #> "
		read yn
		echo 
		case $yn in
			1 ) asignarEntidad && main 
				break ;;
			2 ) asignarColumna && main
				break ;;
			3 ) generaEntidad && main
				break ;;
			4 ) removeEntidad && main
				break ;;
			5 ) exit 1;
				break ;;
			* ) clear && main;
		  esac
	done
}

function pausa(){
	echo -n "presione enter para continuar"
	read e
}

function removeEntidad(){
	asignarEntidad
	if [[ -f $PWD'/src/controllers/'$(echo $entidades)'.js' ]]; then
		rm $PWD'/src/controllers/'$(echo $entidades)'.js'
	fi
	if [[ -f $PWD'/src/collections/'$(echo $entidades)'.js' ]]; then
		rm $PWD'/src/collections/'$(echo $entidades)'.js'
	fi
	if [[ -f $PWD'/src/models/'$(echo $entidad)'.js' ]]; then
		rm $PWD'/src/models/'$(echo $entidad)'.js'
	fi
	echo "Listo"
	pausa
}

function asignarEntidad(){
	echo -n "Ingresar nombre de la entidad ->"
	read r
	r=$(echo $r |tr [[:upper:]] [[:lower:]])
	I=$(echo ${r:0:1})
	
	objecto=$(echo $I |tr [[:lower:]] [[:upper:]])$(echo ${r:1})
	entidad=$r

	v=${r: $(($(echo -n $r | wc -m)-1)):$(echo -n $r | wc -m)}
	if [[ "$v" == "a" ]]; then
		objectos=$(echo $I |tr [[:lower:]] [[:upper:]])$(echo ${r:1})'s'
		entidades=$r's'
	else 
		if [[ "$v" == "e" ]]; then 
			objectos=$(echo $I |tr [[:lower:]] [[:upper:]])$(echo ${r:1})'s'
			entidades=$r's'
		else 
			if [[ "$v" == "i" ]]; then 
				objectos=$(echo $I |tr [[:lower:]] [[:upper:]])$(echo ${r:1})'s'
				entidades=$r's'
			else 
				if [[ "$v" == "o" ]]; then 
					objectos=$(echo $I |tr [[:lower:]] [[:upper:]])$(echo ${r:1})'s'
					entidades=$r's'
				else 
					if [[ "$v" == "u" ]]; then 
						objectos=$(echo $I |tr [[:lower:]] [[:upper:]])$(echo ${r:1})'s'
						entidades=$r's'
					else
						objectos=$(echo $I |tr [[:lower:]] [[:upper:]])$(echo ${r:1})'es'
						entidades=$r'es'					
					fi
				fi
			fi
		fi
	fi
	echo 'resultado:'
	echo $entidad
	echo $entidades
	pausa
}

function asignarColumna(){
	echo -n "Ingresar columnas sin comas ->"
	read data
	ARRAY=( $data )
	columns="['id_$(echo $entidad)',"
	for arr2 in "${ARRAY[@]}"; do 
		columns=$columns"'"$arr2"',"
	done
	columns=${columns: 0:$(($(echo -n $columns | wc -m)-1))}"]"
	echo 'resultado:'
	echo $columns
	generarData
	pausa
}

function generarData(){
	dataUpdate='{
		'
	data='{
		'
	for arr2 in "${ARRAY[@]}"; do 
		data=$data$arr2":req.body.$arr2 ,"
		dataUpdate=$dataUpdate$arr2":req.body.$arr2 || data.get('$arr2'),"
	done
	data=$(echo $data)
	dataUpdate=$(echo $dataUpdate)
	data=${data: 0:$(($(echo -n $data | wc -m)-1))}" }"
	dataUpdate=${dataUpdate: 0:$(($(echo -n $dataUpdate | wc -m)-1))}" }"
	echo $data
	echo $dataUpdate
}

function generaEntidad(){

	echo "Estas a punto de generar:"
	echo $PWD'/src/controllers/'$(echo $entidades)'.js'
	echo $PWD'/src/collections/'$(echo $entidades)'.js'
	echo $PWD'/src/models/'$(echo $entidad)'.js'
	echo "Con los siguientes datos:"
	echo $objecto
	echo $objectos
	echo $entidad
	echo $entidades
	echo $data
	echo -n 'Y/n ->'
	read  CND
	if [ "$CND" = "Y" ] ; then 
		validar 
	fi
	if [ "$CND" = "y" ] ; then 
		validar 
	fi
}

function validar(){
	if [[ -f $PWD'/src/controllers/'$(echo $entidades)'.js' ]]; then
		echo $DIR
		echo "El controlador "'/src/controllers/'$(echo $entidades)'.js'" ya existe desea reemplazarlo"
		echo -n 'Y/n ->'
		read  CND
		if [ "$CND" = "Y" ] ; then 
			generar 
			return
		fi
		if [ "$CND" = "y" ] ; then 
			generar 
			return
		fi
	fi
	generar
}

function generar(){
	echo
	crearControlador
	crearColeccion
	crearModelo
	pausa
}

function crearControlador(){
	echo "'use strict';

const $objectos 	= require('../collections/$entidades');
const $objecto  	= require('../models/$entidad');

function get$(echo $objectos)(req, res, next) {
	$(echo $objectos).query({})
	.fetch({ columns: $columns })
	.then(function(data) {
		if (!data)
			return res.status(404).json({ 
				error: true, 
				data: { mensaje: 'No hay dato registrados' } 
			});

		return res.status(200).json({
			error: false,
			data: data
		});
	})
	.catch(function (err) {
     	return res.status(500).json({
			error: true,
			data: { mensaje: err.message }
		});
    });
}

function save$(echo $objecto)(req, res, next){
	console.log(JSON.stringify(req.body));

	$(echo $objecto).forge($data)
	.save()
	.then(function(data){
		res.status(200).json({
			error: false,
			data: [{
				msg: \"Registro Creado\"
			}]
		});
	})
	.catch(function (err) {
		res.status(500)
		.json({
			error: true,
			data: {message: err.message}
		});
	});
}

function get$(echo $objecto)ById(req, res, next) {
	const id = Number.parseInt(req.params.id);
	if (!id || id == 'NaN') 
		return res.status(400).json({ 
			error: true, 
			data: { mensaje: 'Solicitud incorrecta' } 
		});

	$(echo $objecto).forge({ id_$(echo $entidad): id, estatus: 1 })
	.fetch()
	.then(function(data) {
		if(!data) 
			return res.status(404).json({ 
				error: true, 
				data: { mensaje: 'dato no encontrado' } 
			});
		return res.status(200).json({ 
			error : false, 
			data : data 
		});
	})
	.catch(function(err){
		return res.status(500).json({ 
			error: false, 
			data: { mensaje: err.message } 
		})
	});
}

function update$(echo $objecto)(req, res, next) {
	const id = Number.parseInt(req.params.id);
	if (!id || id == 'NaN') {
		return res.status(400).json({ 
			error: true, 
			data: { mensaje: 'Solicitud incorrecta' } 
		});
	}

	$(echo $objecto).forge({ id_$(echo $entidad): id, estatus: 1 })
	.fetch()
	.then(function(data){
		if(!data) 
			return res.status(404).json({ 
				error: true, 
				data: { mensaje: 'Solicitud no encontrada' } 
			});
		data.save($dataUpdate)
		.then(function() {
			return res.status(200).json({ 
				error: false, 
				data: { mensaje: 'Registro actualizado' } 
			});
		})
		.catch(function(err) {
			return res.status(500).json({ 
				error : true, 
				data : { mensaje : err.message } 
			});
		})
	})
	.catch(function(err) {
		return res.status(500).json({ 
			error : true, 
			data : { mensaje : err.message } 
		});
	})
}

function delete$(echo $objecto)(req, res, next) {
	const id = Number.parseInt(req.params.id);
	if (!id || id == 'NaN') {
		return res.status(400).json({ 
			error: true, 
			data: { mensaje: 'Solicitud incorrecta' } 
		});
	}
	$(echo $objecto).forge({ id_$(echo $entidad): id, estatus: 1 })
	.fetch()
	.then(function(data){
		if(!data) 
			return res.status(404).json({ 
				error: true, 
				data: { mensaje: 'Solicitud no encontrad0' } 
			});

		data.save({ estatus:  0 })
		.then(function() {
			return res.status(200).json({ 
				error: false,
				data: { mensaje: 'Registro eliminado' } 
			});
		})
		.catch(function(err) {
			return res.status(500).json({ 
				error: true, 
				data: { mensaje: err.message} 
			});
		})
	})
	.catch(function(err){
		return res.status(500).json({ 
			error: true, 
			data: { mensaje: err.message } 
		});
	})
}

module.exports = {
	get$(echo $objectos),
	save$(echo $objecto),
	get$(echo $objecto)ById,
	update$(echo $objecto),
	delete$(echo $objecto)
}">$PWD'/src/controllers/'$(echo $entidades)'.js'
echo
echo "generado el controlador"
}

function crearColeccion(){
	echo "'use strict'

const Bookshelf = require('../commons/bookshelf');
const $(echo $objecto) = require('../models/$(echo $entidad)');

const $(echo $objectos) = Bookshelf.Collection.extend({
	model: $(echo $objecto)
});

module.exports = $(echo $objectos);">$PWD'/src/collections/'$(echo $entidades)'.js'
	echo
	echo "generado la coleccion"
}

function crearModelo(){
	echo "'use strict'

const Bookshelf = require('../commons/bookshelf');

let $(echo $objecto) = Bookshelf.Model.extend({
  tableName: '$(echo $entidad)',
  idAttribute: 'id_$(echo $entidad)'
});

module.exports = Bookshelf.model('$(echo $objecto)', $(echo $objecto));">$PWD'/src/models/'$(echo $entidad)'.js'
	echo
	echo "generado el modelo"
}

main